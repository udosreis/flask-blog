Pragmatic Programmer
Ugo Dos Reis
2020-10-08
<p>The first chapter of "Pragmatic Programmer" discusses ways to become a better software developer-something very applicable to me. So, in this blog post, I want to summarize the authors' tips and talk about a couple of them.

<h2>Responsibility
<p>In the first section, the authors stress the importance of taking ownership of issues going on with a project. Good programmers should explore alternatives instead of making excuses for projects not going perfectly. 

<h2>Software Rot
<p>The next section talks about why projects experience "software rot" (deterioration of project quality) and how to prevent such decline. I had never heard of "software rot" before, but after reading the section, I noticed something: I had experienced it.
<p>The book starts with a question: why are some buildings damaged while others look brand new? Because once a broken window is not repaired immediately, people start caring less about the building leading to faster decay. The book applies this idea to code where bad design or code bring down the standard of future code, making the project decline. 
<p>I found this section interesting as I have seen "software rot" happen in one of my projects. I had learned a new method of implementation that was much better than the current one but didn't replace the old code right away. This led me to write worse code, as part of the project was already subpar. Since then, I have decided to fix any issues as soon as they come up, and reading the book has confirmed my new tactic is crucial.

<h2>Beta Releases
<p>After "software rot," the chapter talked about "good-enough code." What is meant by this is that a program will never be perfect, and releasing a working version that's not fully polished (like a BETA version) allows for feedback. The book says people would rather have a less than perfect program today instead of having to wait for a perfect program-and I agree. I concur with this principle and have used it with my portfolio website and even this blog, where I released a working version that wasn't fully finished (ex. responsiveness not fully completed and some design quirks not figured out). 

<h2>Passion
<p>The book then moved on to one of the most important aspects of being a good software developer: passion.  Like in anything, passion is what separates the good from the great, and the book encourages software developers to explore new things in the field through courses, books, and other mediums. 

<h2>Communication
<p>Finally, the book mentions communication. Communicating is a huge part of being a software developer as one has to give ideas, report project progress, and write documents. To be a strong programmer, one has to choose the right moment and way of communicating. 

<h2>Conclusion
<p>Overall, I agree with the points the authors made and want to keep applying them. I will keep learning new things, whether it is through side projects or courses, I will prevent "software rot," and I will release BETA versions of my programs. See you next week!